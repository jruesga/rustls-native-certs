name: rustls

permissions:
  contents: read

on:
  push:
  pull_request:
  merge_group:
  schedule:
    - cron: '0 18 * * *'

jobs:
  build:
    name: Build+test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # test a bunch of toolchains on ubuntu
        rust:
          - stable
          - beta
          - nightly
        os: [ubuntu-latest]
        # but only stable on macos/windows (slower platforms)
        include:
          - os: macos-latest
            rust: stable
          - os: windows-latest
            rust: stable
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install ${{ matrix.rust }} toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Install NASM for aws-lc-rs on Windows
        if: runner.os == 'Windows'
        uses: ilammy/setup-nasm@v1

      - name: cargo build (debug; default features)
        run: cargo build --locked

      - name: cargo test (debug; default features)
        run: cargo test --locked
        env:
          RUST_BACKTRACE: 1

      - name: cargo test (debug; all features)
        run: cargo test --locked --all-features
        env:
          RUST_BACKTRACE: 1

      - name: cargo build (debug; no default features)
        run: cargo build --locked --no-default-features

      - name: cargo test (debug; no default features; no run)
        run: cargo test --locked --no-default-features --no-run

      - name: cargo test (release; no run)
        run: cargo test --locked --release --no-run

      - name: run macOS integration test
        if: matrix.os == 'macos-latest'
        run: sudo bash integration-tests/macos.sh

  msrv:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install MSRV toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "1.60"

      - run: cargo check --locked --lib --all-features

  android:
    name: Android+Build+Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust:
          - stable
          - beta
          - nightly
        os: [ ubuntu-latest ]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install ${{ matrix.rust }} toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Setup Android SDK
        uses: amyu/setup-android@v4
        with:
          sdk-version: 35
          build-tools-version: '35.0.0'
          cmake-version: '3.30.5'
          ndk-version: '28.0.12433566'
          cache-key: 'sdk-35_tools_35.0.0_ndk-28.0.12433566_cmake-3.30.5'
          generate-job-summary: true

      - name: CargoNdk
        working-directory: ./integration-tests/android
        run: |
          rustup target add \
            aarch64-linux-android \
            armv7-linux-androideabi \
            x86_64-linux-android \
            i686-linux-android
          cargo install cargo-ndk

      - name: cargo build (android; debug; default features)
        working-directory: ./integration-tests/android
        run: cargo ndk -t armeabi-v7a -t arm64-v8a -t x86 -t x86_64 -o target/ build --locked

      - name: cargo build (android; debug; no default features)
        working-directory: ./integration-tests/android
        run: cargo ndk -t armeabi-v7a -t arm64-v8a -t x86 -t x86_64 -o target/ build --locked --no-default-features

  minimal-versions:
    name: Check minimum versions of direct dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@nightly

      - name: Install cargo-minimal-versions
        uses: taiki-e/install-action@cargo-minimal-versions

      # cargo-minimal-versions requires cargo-hack
      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack

      - name: Check direct-minimal-versions
        run: cargo minimal-versions --direct --ignore-private check

  semver:
    name: Check semver compatibility
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Check semver
        uses: obi1kenobi/cargo-semver-checks-action@v2

  docs:
    name: Check for documentation errors
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@nightly

      - name: cargo doc (rustls; all features)
        run: cargo doc --locked --all-features --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: -Dwarnings

  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - run: cargo clippy --locked --all-features --all-targets -- --deny warnings

  clippy-nightly:
    name: Clippy (Nightly)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy
      - run: cargo clippy --locked --all-features --all-targets -- --deny warnings
